{"version":3,"sources":["components/Profile/Profile.module.css","components/Statistic/Statistic.module.css","components/FriendListItem/FriendListItem.module.css","components/FriendList/FriendList.module.css","components/Transaction/Transaction.module.css","components/Profile/Profile.js","components/FriendListItem/FriendListItem.js","components/FriendList/FriendList.js","components/Statistic/Statistic.js","components/Transaction/Transaction.js","App.js","index.js"],"names":["module","exports","Profile","name","tag","location","avatar","stats","className","styles","profile","description","src","alt","label","quantity","followers","views","likes","FriendListItem","isOnline","item","isOffline","width","FriendList","friends","friendList","map","id","Statistics","title","statistics","statList","percentage","style","backgroundColor","Math","floor","random","toString","TransactionHistory","items","transactionHistory","type","amount","currency","App","user","Statistic","statisticalData","Transaction","transactions","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a801ce16.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__2gAvf\",\"description\":\"Profile_description__3JyKT\",\"avatar\":\"Profile_avatar__3FI1K\",\"name\":\"Profile_name__2RGym\",\"tag\":\"Profile_tag__1WbUB\",\"location\":\"Profile_location__3pjq7\",\"stats\":\"Profile_stats__1sI9M\",\"label\":\"Profile_label__2Br20\",\"quantity\":\"Profile_quantity__2YR82\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statistics\":\"Statistic_statistics__3vDbM\",\"title\":\"Statistic_title__2MMiS\",\"statList\":\"Statistic_statList__1TvIM\",\"item\":\"Statistic_item__1ng7s\",\"label\":\"Statistic_label__3FPIQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"FriendListItem_item__3qmdh\",\"isOnline\":\"FriendListItem_isOnline__226Wx\",\"isOffline\":\"FriendListItem_isOffline__3gjIb\",\"avatar\":\"FriendListItem_avatar__3va6d\",\"name\":\"FriendListItem_name__FEY7i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendList\":\"FriendList_friendList__1-6iW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"transactionHistory\":\"Transaction_transactionHistory__2rVrz\"};","import PropTypes from \"prop-types\";\nimport styles from \"./Profile.module.css\";\n\nfunction Profile({ name, tag, location, avatar, stats }) {\n  return (\n    <div className={styles.profile}>\n      <div className={styles.description}>\n        <img src={avatar} alt=\"Аватар пользователя\" className={styles.avatar} />\n        <p className={styles.name}>{name}</p>\n        <p className={styles.tag}>@{tag}</p>\n        <p className={styles.location}>{location}</p>\n      </div>\n\n      <ul className={styles.stats}>\n        <li>\n          <span className={styles.label}>Followers</span>\n          <span className={styles.quantity}>{stats.followers}</span>\n        </li>\n        <li>\n          <span className={styles.label}>Views</span>\n          <span className={styles.quantity}>{stats.views}</span>\n        </li>\n        <li>\n          <span className={styles.label}>Likes</span>\n          <span className={styles.quantity}>{stats.likes}</span>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nProfile.propTypes = {\n  name: PropTypes.string.isRequired,\n  tag: PropTypes.string.isRequired,\n  location: PropTypes.string,\n  avatar: PropTypes.string,\n  stats: PropTypes.object,\n};\n\nexport default Profile;\n\n/* Необходимо создать компонент < Profile >, с помощью которого мы могли бы отображать\nинформацию о пользователе социальной сети.Данные о пользователе лежат в файле user.json.\n\nКомпонент должен принимать несколько пропсов с информацией о пользователе:\nname — имя пользователя\ntag — тег в социальной сети без @\nlocation — город и страна\navatar — url на изображение\nstats — объект с информацией об активности\nКомпонент должен создавать DOM элемент следующей структуры. */\n","import PropTypes from \"prop-types\";\nimport styles from \"./FriendListItem.module.css\";\n\nfunction FriendListItem({ avatar, name, isOnline }) {\n  return (\n    <li className={styles.item}>\n      <span className={isOnline ? styles.isOnline : styles.isOffline}></span>\n      <img className={styles.avatar} src={avatar} alt={name} width=\"48\" />\n      <p className={styles.name}>{name}</p>\n    </li>\n  );\n}\n\nFriendListItem.propTypes = {\n  avatar: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  isOnline: PropTypes.bool.isRequired,\n};\n\nexport default FriendListItem;\n\n/* Компонент должен принимать несколько пропов:\navatar - ссылка на аватар\nname - имя друга\nisOnline - буль сигнализирующий о состоянии друга, в сети или нет.\nВ зависимости от пропа isOnline, должен меняться цвет фона span.status. \nЭто можно сделать через разный CSS-класс или Styled Components.\nКомпонент должен создавать DOM следующей структуры. */\n","import PropTypes from \"prop-types\";\nimport FriendListItem from \"../FriendListItem/FriendListItem\";\nimport styles from \"./FriendList.module.css\";\n\nfunction FriendList({ friends }) {\n  return (\n    <ul className={styles.friendList}>\n      {friends.map(({ id, avatar, name, isOnline }) => (\n        <FriendListItem\n          key={id}\n          avatar={avatar}\n          name={name}\n          isOnline={isOnline}\n        />\n      ))}\n    </ul>\n  );\n}\n\nFriendList.propTypes = {\n  friends: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n    })\n  ),\n};\n\nexport default FriendList;\n/*\nНеобходимо создать компонент <FriendList>, с помощью которого мы могли бы \nотображать информацию о друзьях пользователя. Информация о друзьях хранится в файле \nfriends.json.\n\nКомпонент должен принимать один проп friends - массив объектов друзей.\nКомпонент должен создавать DOM следующей структуры.\n*/\n\n/*\n<ul class=\"friend-list\">\n  <!-- Произвольное кол-во FriendListItem, в зависимости от кол-ва объектов в массиве -->\n</ul>\n\n<FriendList friends={friends} />,\n*/\n","import PropTypes from \"prop-types\";\nimport styles from \"./Statistic.module.css\";\n\nfunction Statistics({ title, stats }) {\n  return (\n    <section className={styles.statistics}>\n      {title && <h2 className={styles.title}>{title}</h2>}\n\n      <ul className={styles.statList}>\n        {stats.map(({ id, label, percentage }) => (\n          <li\n            className={styles.item}\n            key={id}\n            style={{ backgroundColor: setRandomBgC() }}\n          >\n            <span className={styles.label}>{label}</span>\n            <span className={styles.percentage}>{percentage}</span>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n}\n\nfunction setRandomBgC() {\n  return \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n}\n\nStatistics.propTypes = {\n  title: PropTypes.string,\n  stats: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      label: PropTypes.string.isRequired,\n      percentage: PropTypes.number.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default Statistics;\n\n/* Создать компонет < Statistics >, который бы отображал статистику по переданным пропам.\nК примеру загрузки в облако по типу файлов, посещение веб - страницы пользователями \nразных стран, финансовые траты и т.п.Данные о статистике лежат в файле statistical - data.json.\n\nКомпонент должен принимать два пропа title и stats, в которых указывается заголовок \nи объект статистики.\n\ntitle - не обязателен, и если он не передан, не должна рендериться разметка заголовка <h2>.\n    stats - массив объектов содержащих информацию о элементе статистики. \nМожет иметь произвольное кол - во элементов.\nЦвет фона элемента статистики в оформлении можно пропустить, либо создать функцию для \nгенерации случайного цвета. Компонент должен создавать DOM элемент следующей структуры. */\n\n/* \n<Statistics title=\"Upload stats\" stats={statisticalData} />;\n<Statistics stats={statisticalData} />; \n*/\n","import PropTypes from \"prop-types\";\nimport styles from \"./Transaction.module.css\";\n\nfunction TransactionHistory({ items }) {\n  return (\n    <table className={styles.transactionHistory}>\n      <thead>\n        <tr>\n          <th>Type</th>\n          <th>Amount</th>\n          <th>Currency</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {items.map(({ id, type, amount, currency }) => (\n          <tr key={id}>\n            <td>{type}</td>\n            <td>{amount}</td>\n            <td>{currency}</td>\n          </tr>\n        ))}\n        ;\n      </tbody>\n    </table>\n  );\n}\n\nTransactionHistory.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      type: PropTypes.string.isRequired,\n      amount: PropTypes.string.isRequired,\n      currency: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default TransactionHistory;\n\n/* Данные для списка доступны в формате JSON в файле transactions.json. \nЭто массив объектов, каждый объект описывает одну транзакцию со следующими свойствами:\nid — уникальный идентификатор транзакции\ntype — тип транзакции\namount - сумма транзакции\ncurrency - тип валюты\nОписание компонента\nНеобходимо создать компонент <TransactionHistory> принимающий один проп items - массив \nобъектов транзакций из transactions.json. Компонент создает разметку таблицы. \nКаждая транзакция это строка таблицы. В примере приведена разметка двух транзакций. */\n","import \"./App.css\";\nimport Profile from \"./components/Profile/Profile\";\nimport FriendList from \"./components/FriendList/FriendList\";\nimport Statistics from \"./components/Statistic/Statistic\";\nimport TransactionHistory from \"./components/Transaction/Transaction\";\n\nimport transactions from \"./data/transaction-history/transactions.json\";\nimport statisticalData from \"./data/statistics/statistical-data.json\";\nimport user from \"./data/social-profile/user.json\";\nimport friends from \"./data/friend-list/friends.json\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Profile\n        name={user.name}\n        tag={user.tag}\n        location={user.location}\n        avatar={user.avatar}\n        stats={user.stats}\n      />\n      <FriendList friends={friends} />\n      <Statistics title=\"Upload stats\" stats={statisticalData} />\n      <TransactionHistory items={transactions} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}